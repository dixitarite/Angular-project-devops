name: Angular Static Web App Deployment

on:
  workflow_call:
    inputs:
      app_dist_path:
        required: true
        type: string
      deploy_target:
        required: true
        type: string
      enable_cloudfront_invalidation:
        required: false
        type: boolean
        default: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_S3_BUCKET:
        required: true
      AWS_CLOUDFRONT_DISTRIBUTION_ID:
        required: false

jobs:
  build:
    name: Build Angular App
    runs-on: ubuntu-latest
    outputs:
      dist-path: ${{ inputs.app_dist_path }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm ci

      - name: Build Angular App (Production)
        run: npm run build -- --configuration production

  deploy-aws:
    name: Deploy to AWS S3 + CloudFront
    if: ${{ inputs.deploy_target == 'aws' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install AWS CLI (via pip)
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip3 install awscli --upgrade

      - name: Debug â€“ Print Distribution Folder
        run: |
          echo "Checking contents at path: ${{ inputs.app_dist_path }}"
          ls -la ${{ inputs.app_dist_path }}

      - name: Upload to S3
        run: |
          echo "Uploading to S3 bucket: ${{ secrets.AWS_S3_BUCKET }}"
          aws s3 sync ${{ inputs.app_dist_path }} s3://${{ secrets.AWS_S3_BUCKET }} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Invalidate CloudFront Cache (Optional)
        if: ${{ inputs.enable_cloudfront_invalidation }}
        run: |
          if [ -n "${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "Invalidating CloudFront cache..."
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          else
            echo "CloudFront invalidation skipped: Distribution ID not provided."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
